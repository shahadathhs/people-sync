model User {
  id String @id @default(uuid())

  name     String @default("Unnamed User")
  email    String @unique
  timezone String @default("UTC") // 'Europe/London', 'America/New_York', 'Asia/Tokyo', etc  Based on Luxon Package
  password String // hashed password 

  username    String  @unique // auto-generated, updatable once
  usernameSet Boolean @default(false)

  employeeId BigInt @unique @default(autoincrement()) // auto-increment employee number

  role   UserRole @default(EMPLOYEE)
  status Status   @default(ACTIVE)

  // Logout tracking
  isLoggedIn   Boolean   @default(false)
  lastLoginAt  DateTime?
  lastLogoutAt DateTime?

  avatarId String?
  avatar   FileInstance? @relation(fields: [avatarId], references: [id], onDelete: SetNull)

  designationId String?
  designation   Designation? @relation(fields: [designationId], references: [id], onDelete: SetNull)

  // Chats
  privateMessage                 PrivateMessage[]
  privateMessageStatus           PrivateMessageStatus[]
  privateCallInitiator           PrivateCall[]
  privateConversationParticipant PrivateConversationParticipant[]
  privateCallParticipant         PrivateCallParticipant[]

  // Notifications
  notifications UserNotification[]

  // Refresh Tokens
  refreshTokens RefreshToken[]

  // Survey & Pool
  surveyResponses SurveyResponse[]
  pollResponse    PollResponse[]

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@index([role])
  @@index([status])
  @@map("users")
}

enum UserRole {
  OWNER // created once on sign up, cannot be deleted/demoted
  SUPER_ADMIN // delegated by owner
  ADMIN
  EMPLOYEE
}

enum Status {
  ACTIVE // Normal usable account
  INACTIVE // Temporarily disabled (user deactivated or banned)
  PENDING // Waiting for approval/verification
  SUSPENDED // Temporarily blocked (policy violation, etc.)
  DELETED // Soft deleted / marked for removal
}

model RefreshToken {
  id String @id @default(uuid())

  token String @unique // hashed

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@map("refresh_tokens")
}
